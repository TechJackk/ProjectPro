{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\mern-intern\\\\frontend\\\\src\\\\components\\\\TaskPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport TaskCard from './TaskCard';\nimport AddTaskModal from './AddTaskModal';\nimport EditTaskModal from './EditTaskModal';\nimport TaskDetailsModal from './TaskDetailsModal';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskPage = () => {\n  _s();\n\n  const {\n    projectId\n  } = useParams();\n  const [tasksByProject, setTasksByProject] = useState({});\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [isAddModalOpen, setAddModalOpen] = useState(false);\n  const [isEditModalOpen, setEditModalOpen] = useState(false);\n  const [isDetailsModalOpen, setDetailsModalOpen] = useState(false);\n  useEffect(() => {\n    // Initialize tasks for the project if not already initialized\n    if (!tasksByProject[projectId]) {\n      setTasksByProject(prev => ({ ...prev,\n        [projectId]: []\n      }));\n    }\n  }, [projectId, tasksByProject]);\n\n  const addTask = task => {\n    setTasksByProject(prev => ({ ...prev,\n      [projectId]: [...prev[projectId], task]\n    }));\n  };\n\n  const editTask = updatedTask => {\n    setTasksByProject(prev => ({ ...prev,\n      [projectId]: prev[projectId].map(t => t.id === updatedTask.id ? updatedTask : t)\n    }));\n  };\n\n  const deleteTask = id => {\n    setTasksByProject(prev => ({ ...prev,\n      [projectId]: prev[projectId].filter(t => t.id !== id)\n    }));\n  };\n\n  const tasks = tasksByProject[projectId] || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Tasks for Project \", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"mb-3\",\n      onClick: () => setAddModalOpen(true),\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list mt-3\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        task: task,\n        openTaskModal: () => {\n          setSelectedTask(task);\n          setDetailsModalOpen(true);\n        },\n        openEditTaskModal: () => {\n          setSelectedTask(task);\n          setEditModalOpen(true);\n        },\n        deleteTask: deleteTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTaskModal, {\n      isOpen: isAddModalOpen,\n      onClose: () => setAddModalOpen(false),\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(EditTaskModal, {\n      isOpen: isEditModalOpen,\n      onClose: () => setEditModalOpen(false),\n      task: selectedTask,\n      onEdit: editTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(TaskDetailsModal, {\n      isOpen: isDetailsModalOpen,\n      onClose: () => setDetailsModalOpen(false),\n      task: selectedTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskPage, \"n5k939nQ65efh9MHVc2925Clu/s=\", false, function () {\n  return [useParams];\n});\n\n_c = TaskPage;\nexport default TaskPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","TaskCard","AddTaskModal","EditTaskModal","TaskDetailsModal","Button","TaskPage","projectId","tasksByProject","setTasksByProject","selectedTask","setSelectedTask","isAddModalOpen","setAddModalOpen","isEditModalOpen","setEditModalOpen","isDetailsModalOpen","setDetailsModalOpen","prev","addTask","task","editTask","updatedTask","map","t","id","deleteTask","filter","tasks"],"sources":["C:/Desktop/mern-intern/frontend/src/components/TaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport TaskCard from './TaskCard';\r\nimport AddTaskModal from './AddTaskModal';\r\nimport EditTaskModal from './EditTaskModal';\r\nimport TaskDetailsModal from './TaskDetailsModal';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst TaskPage = () => {\r\n  const { projectId } = useParams();\r\n  const [tasksByProject, setTasksByProject] = useState({});\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [isAddModalOpen, setAddModalOpen] = useState(false);\r\n  const [isEditModalOpen, setEditModalOpen] = useState(false);\r\n  const [isDetailsModalOpen, setDetailsModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize tasks for the project if not already initialized\r\n    if (!tasksByProject[projectId]) {\r\n      setTasksByProject((prev) => ({ ...prev, [projectId]: [] }));\r\n    }\r\n  }, [projectId, tasksByProject]);\r\n\r\n  const addTask = (task) => {\r\n    setTasksByProject((prev) => ({\r\n      ...prev,\r\n      [projectId]: [...prev[projectId], task],\r\n    }));\r\n  };\r\n\r\n  const editTask = (updatedTask) => {\r\n    setTasksByProject((prev) => ({\r\n      ...prev,\r\n      [projectId]: prev[projectId].map((t) =>\r\n        t.id === updatedTask.id ? updatedTask : t\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTasksByProject((prev) => ({\r\n      ...prev,\r\n      [projectId]: prev[projectId].filter((t) => t.id !== id),\r\n    }));\r\n  };\r\n\r\n  const tasks = tasksByProject[projectId] || [];\r\n\r\n  return (\r\n    <div className=\"task-page\">\r\n      <h1>Tasks for Project {projectId}</h1>\r\n      <Button variant=\"primary\" className=\"mb-3\" onClick={() => setAddModalOpen(true)}>Add Task</Button>\r\n      <div className=\"task-list mt-3\">\r\n        {tasks.map((task) => (\r\n          <TaskCard\r\n            key={task.id}\r\n            task={task}\r\n            openTaskModal={() => { setSelectedTask(task); setDetailsModalOpen(true); }}\r\n            openEditTaskModal={() => { setSelectedTask(task); setEditModalOpen(true); }}\r\n            deleteTask={deleteTask}\r\n          />\r\n        ))}\r\n      </div>\r\n      <AddTaskModal isOpen={isAddModalOpen} onClose={() => setAddModalOpen(false)} onAdd={addTask} />\r\n      {selectedTask && (\r\n        <EditTaskModal\r\n          isOpen={isEditModalOpen}\r\n          onClose={() => setEditModalOpen(false)}\r\n          task={selectedTask}\r\n          onEdit={editTask}\r\n        />\r\n      )}\r\n      {selectedTask && (\r\n        <TaskDetailsModal\r\n          isOpen={isDetailsModalOpen}\r\n          onClose={() => setDetailsModalOpen(false)}\r\n          task={selectedTask}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}